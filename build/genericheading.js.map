{"version":3,"file":"genericheading.js","mappings":"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","sources":["webpack://pc-concepts-theme/external window [\"wp\",\"blockEditor\"]","webpack://pc-concepts-theme/external window [\"wp\",\"blocks\"]","webpack://pc-concepts-theme/external window [\"wp\",\"components\"]","webpack://pc-concepts-theme/external window [\"wp\",\"element\"]","webpack://pc-concepts-theme/webpack/bootstrap","webpack://pc-concepts-theme/webpack/runtime/compat get default export","webpack://pc-concepts-theme/webpack/runtime/define property getters","webpack://pc-concepts-theme/webpack/runtime/hasOwnProperty shorthand","webpack://pc-concepts-theme/webpack/runtime/make namespace object","webpack://pc-concepts-theme/./our-blocks/genericheading.js"],"sourcesContent":["module.exports = window[\"wp\"][\"blockEditor\"];","module.exports = window[\"wp\"][\"blocks\"];","module.exports = window[\"wp\"][\"components\"];","module.exports = window[\"wp\"][\"element\"];","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// Import necessary components and functions from WordPress\r\nimport { ToolbarGroup, ToolbarButton } from \"@wordpress/components\";\r\nimport { RichText, BlockControls } from \"@wordpress/block-editor\";\r\nimport { registerBlockType } from \"@wordpress/blocks\";\r\n\r\n// Register a new block type called \"Generic Heading\"\r\nregisterBlockType(\"ourblocktheme/genericheading\", {\r\n  title: \"Generic Heading\",\r\n  attributes: {\r\n    text: { type: \"string\" }, // The heading text\r\n    size: { type: \"string\", default: \"large\" }, // The size of the heading (default is \"large\")\r\n  },\r\n\r\n  // Use the EditComponent to render the block in the editor\r\n  edit: EditComponent,\r\n\r\n  // Use the SaveComponent to render the block in the frontend\r\n  save: SaveComponent,\r\n});\r\n\r\n// Define the EditComponent, which allows users to edit the block in the editor\r\nfunction EditComponent(props) {\r\n  // Define a function to handle changes to the heading text\r\n  function handleTextChange(x) {\r\n    props.setAttributes({ text: x });\r\n  }\r\n\r\n  // Render the block controls and the RichText editor\r\n  return (\r\n    <>\r\n      <BlockControls>\r\n        <ToolbarGroup>\r\n          <ToolbarButton\r\n            // Set the \"isPressed\" attribute based on the size of the heading\r\n            isPressed={props.attributes.size === \"large\"}\r\n            // Set the size of the heading to \"large\" when the button is clicked\r\n            onClick={() => props.setAttributes({ size: \"large\" })}\r\n          >\r\n            Large\r\n          </ToolbarButton>\r\n          <ToolbarButton\r\n            isPressed={props.attributes.size === \"medium\"}\r\n            onClick={() => props.setAttributes({ size: \"medium\" })}\r\n          >\r\n            Medium\r\n          </ToolbarButton>\r\n          <ToolbarButton\r\n            isPressed={props.attributes.size === \"small\"}\r\n            onClick={() => props.setAttributes({ size: \"small\" })}\r\n          >\r\n            Small\r\n          </ToolbarButton>\r\n        </ToolbarGroup>\r\n      </BlockControls>\r\n      <RichText\r\n        // Allow bold and italic formatting in the heading text\r\n        allowedFormats={[\"core/bold\", \"core/italic\"]}\r\n        // Use the \"h1\" HTML tag for the heading\r\n        tagName='h1'\r\n        // Set the CSS classes based on the size of the heading\r\n        className={`headline headline--${props.attributes.size}`}\r\n        // Set the value of the heading text to the \"text\" attribute\r\n        value={props.attributes.text}\r\n        // Call the handleTextChange function when the text changes\r\n        onChange={handleTextChange}\r\n      />\r\n    </>\r\n  );\r\n}\r\n\r\n// Define the SaveComponent, which renders the block in the frontend\r\nfunction SaveComponent(props) {\r\n  // Define a function to determine the HTML tag to use based on the size of the heading\r\n  function createTagName() {\r\n    switch (props.attributes.size) {\r\n      case \"large\":\r\n        return \"h1\";\r\n      case \"medium\":\r\n        return \"h2\";\r\n      case \"small\":\r\n        return \"h3\";\r\n    }\r\n  }\r\n\r\n  // Render the RichText content with the appropriate HTML tag and CSS classes\r\n  return (\r\n    <RichText.Content\r\n      // Use the createTagName function to determine the HTML tag\r\n      tagName={createTagName()}\r\n      // Set the value of the heading text to the \"text\" attribute\r\n      value={props.attributes.text}\r\n      // Set the CSS classes based on the size of the heading\r\n      className={`headline headline--${props.attributes.size}`}\r\n    />\r\n  );\r\n}\r\n"],"names":["ToolbarGroup","ToolbarButton","RichText","BlockControls","registerBlockType","title","attributes","text","type","size","default","edit","EditComponent","save","SaveComponent","props","handleTextChange","x","setAttributes","createElement","Fragment","isPressed","onClick","allowedFormats","tagName","className","value","onChange","createTagName","Content"],"sourceRoot":""}